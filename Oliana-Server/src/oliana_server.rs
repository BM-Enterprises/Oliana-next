
fn main() -> Result<(), Box<dyn std::error::Error>> {
    let rt  = tokio::runtime::Builder::new_multi_thread()
    .worker_threads(std::cmp::max(2, num_cpus::get_physical())) // Use all host cores, unless single-cored in which case pretend to have 2
    .thread_stack_size(8 * 1024 * 1024)
    .enable_time()
    .enable_io()
    .build()?;

  rt.block_on(async {
    if let Err(e) = main_async().await {
      eprintln!("[ main_async ] {}", e);
      std::process::exit(1);
    }
  });

  Ok(())
}

async fn main_async() -> Result<(), Box<dyn std::error::Error>> {
    use tarpc::server::Channel;
    use oliana_server_lib::World;
    use futures::StreamExt;

    let port = 9050;

    let server_addr = (std::net::IpAddr::V6(std::net::Ipv6Addr::LOCALHOST), port);

    // JSON transport is provided by the json_transport tarpc module. It makes it easy
    // to start up a serde-powered json serialization strategy over TCP.
    let mut listener = tarpc::serde_transport::tcp::listen(&server_addr, tarpc::tokio_serde::formats::Bincode::default).await?;

    let server = tarpc::server::BaseChannel::with_defaults(listener);
    tokio::spawn(
        server.execute(oliana_server_lib::HelloServer.serve())
            // Handle all requests concurrently.
            .for_each(|response| async move {
                tokio::spawn(response);
            }));

    // WorldClient is generated by the #[tarpc::service] attribute. It has a constructor `new`
    // that takes a config and any Transport as input.
    // let mut client = oliana_server_lib::WorldClient::new(tarpc::client::Config::default(), client_transport).spawn();

    // The client has an RPC method for each RPC defined in the annotated trait. It takes the same
    // args as defined, with the addition of a Context, which is always the first arg. The Context
    // specifies a deadline and trace information which can be helpful in debugging requests.
    //let hello = client.hello(tarpc::context::current(), "Stim".to_string()).await?;

    // println!("{hello}");


    Ok(())
}
